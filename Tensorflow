---

**`main.py`** (model training)
```python
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
import nltk
nltk.download('punkt')

# Load dataset
df = pd.read_csv('social_media_emotions.csv')  # Expected columns: 'text', 'emotion'

# Preprocess
texts = df['text'].astype(str).values
labels = df['emotion'].values

tokenizer = Tokenizer(num_words=10000, oov_token='<OOV>')
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
padded = pad_sequences(sequences, maxlen=100)

label_encoder = LabelEncoder()
labels_encoded = label_encoder.fit_transform(labels)

x_train, x_test, y_train, y_test = train_test_split(padded, labels_encoded, test_size=0.2, random_state=42)

# Model
model = Sequential([
    Embedding(10000, 64),
    LSTM(64),
    Dense(32, activation='relu'),
    Dense(len(np.unique(y_train)), activation='softmax')
])

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

model.save('emotion_model.h5')
np.save('tokenizer.npy', tokenizer.word_index)
np.save('labels.npy', label_encoder.classes_)
